import React, { useState, useEffect } from 'react';
import { toast } from 'sonner';
import { queries } from '../lib/db';
import type { ApiKey } from '../lib/db';
import supabase from '../lib/db';

interface Project {
  id: string;
  name: string;
  key_type?: 'development' | 'staging' | 'production';
}

interface NewKeyModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: { name: string; key: string; project?: string; projectType: string }) => void;
}

const NewKeyModal: React.FC<NewKeyModalProps> = ({ isOpen, onClose, onSubmit }) => {
  const [name, setName] = useState('');
  const [key, setKey] = useState('');
  const [project, setProject] = useState('');
  const [projectType, setProjectType] = useState('');
  const [isProjectTypeReadOnly, setIsProjectTypeReadOnly] = useState(false);
  const [isValidating, setIsValidating] = useState(false);
  const [validationResult, setValidationResult] = useState<{ isValid: boolean; message: string } | null>(null);
  const [projects, setProjects] = useState<Project[]>([]);
  const [newProject, setNewProject] = useState('');
  const [showNewProjectInput, setShowNewProjectInput] = useState(false);

  useEffect(() => {
    if (isOpen) {
      fetchProjects();
    }
  }, [isOpen]);

  const fetchProjects = async () => {
    try {
      const { data: projectsData, error } = await supabase
        .from('projects')
        .select('id, name, key_type')
        .is('archived_at', null)
        .order('name');

      if (error) throw error;
      setProjects(projectsData || []);
    } catch (error) {
      console.error('Error fetching projects:', error);
      toast.error('Erreur lors du chargement des projets');
    }
  };

  const validateOpenAIKey = async (apiKey: string) => {
    setIsValidating(true);
    try {
      const response = await fetch('https://api.openai.com/v1/models', {
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.status === 401) {
        setValidationResult({ isValid: false, message: 'Clé OpenAI invalide ou expirée' });
        toast.error('Clé OpenAI invalide', {
          description: 'La clé API fournie est invalide ou a expiré.'
        });
      } else if (response.ok) {
        setValidationResult({ isValid: true, message: 'Clé OpenAI valide' });
        toast.success('Clé OpenAI valide', {
          description: 'La clé API a été validée avec succès.'
        });
      }
    } catch (error) {
      setValidationResult({ isValid: false, message: 'Erreur lors de la vérification' });
      toast.error('Erreur de validation', {
        description: 'Impossible de vérifier la clé API. Veuillez réessayer.'
      });
    }
    setIsValidating(false);
  };

  const handleKeyChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setKey(value);
    setValidationResult(null);
    
    if (value.startsWith('sk-')) {
      validateOpenAIKey(value);
    }
  };

  const handleProjectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    if (value === 'new') {
      setShowNewProjectInput(true);
      setProject('');
      setIsProjectTypeReadOnly(false);
      setProjectType('');
    } else {
      setShowNewProjectInput(false);
      setProject(value);
      
      // Récupérer le type de clé associé au projet sélectionné
      const selectedProject = projects.find(p => p.id === value);
      if (selectedProject && selectedProject.key_type) {
        setProjectType(selectedProject.key_type);
        setIsProjectTypeReadOnly(true);
      } else {
        setProjectType('production');
        setIsProjectTypeReadOnly(false);
      }
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        throw new Error('User not authenticated');
      }

      let projectId = project;

      // Si c'est un nouveau projet, on le crée d'abord
      if (showNewProjectInput && newProject) {
        const { data: newProjectData, error: projectError } = await supabase
          .from('projects')
          .insert([{
            name: newProject,
            created_by: user.id
          }])
          .select()
          .single();

        if (projectError) throw projectError;
        projectId = newProjectData.id;
      }

      let expirationDate = new Date();
      if (key.startsWith('sk-')) {
        expirationDate.setMonth(expirationDate.getMonth() + 3);
      }

      const newApiKey: Omit<ApiKey, 'id' | 'created_at' | 'updated_at'> = {
        name,
        key_value: key,
        project_id: projectId || '00000000-0000-0000-0000-000000000000',
        created_by: user.id,
        expires_at: key.startsWith('sk-') ? expirationDate.toISOString() : null,
        key_type: projectType || 'production',
        provider: key.startsWith('sk-') ? 'openai' : null,
        is_active: true
      };

      onSubmit({
        name,
        key,
        project: projectId,
        projectType: projectType || 'production'
      });

      // Reset form
      setName('');
      setKey('');
      setProject('');
      setProjectType('');
      setNewProject('');
      setShowNewProjectInput(false);
      setValidationResult(null);
      onClose();
    } catch (error) {
      console.error('Error submitting key:', error);
      toast.error('Erreur lors de la création de la clé');
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-md">
        <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          Nouvelle clé API
        </h2>

        <form onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label
                htmlFor="name"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Nom de la clé *
              </label>
              <input
                type="text"
                id="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                required
                minLength={3}
              />
            </div>

            <div>
              <label
                htmlFor="key"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Clé API *
              </label>
              <input
                type="text"
                id="key"
                value={key}
                onChange={handleKeyChange}
                className={`w-full px-3 py-2 border ${
                  validationResult
                    ? validationResult.isValid
                      ? 'border-green-500'
                      : 'border-red-500'
                    : 'border-gray-300 dark:border-gray-600'
                } rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white`}
                required
              />
              {validationResult && (
                <p
                  className={`text-xs mt-1 ${
                    validationResult.isValid ? 'text-green-600' : 'text-red-600'
                  }`}
                >
                  {validationResult.message}
                </p>
              )}
            </div>

            <div>
              <label
                htmlFor="project"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Projet
              </label>
              <select
                id="project"
                value={project}
                onChange={handleProjectChange}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              >
                <option value="">-- Sélectionner un projet --</option>
                {projects.map((p) => (
                  <option key={p.id} value={p.id}>
                    {p.name}
                  </option>
                ))}
                <option value="new">+ Nouveau projet</option>
              </select>
            </div>

            {showNewProjectInput && (
              <div>
                <label
                  htmlFor="newProject"
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Nom du nouveau projet *
                </label>
                <input
                  type="text"
                  id="newProject"
                  value={newProject}
                  onChange={(e) => setNewProject(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                  required={showNewProjectInput}
                  minLength={3}
                />
              </div>
            )}

            <div>
              <label
                htmlFor="projectType"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Type d'environnement *
              </label>
              <select
                id="projectType"
                value={projectType}
                onChange={(e) => setProjectType(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                required
                disabled={isProjectTypeReadOnly}
              >
                <option value="">-- Sélectionner un type --</option>
                <option value="development">Développement</option>
                <option value="staging">Test</option>
                <option value="production">Production</option>
              </select>
            </div>
          </div>

          <div className="mt-6 flex justify-end space-x-3">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Annuler
            </button>
            <button
              type="submit"
              className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              disabled={isValidating}
            >
              {isValidating ? 'Validation...' : 'Créer'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default NewKeyModal;
